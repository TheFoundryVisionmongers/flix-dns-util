// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: flix_transfer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_flix_transfer_proto protoreflect.FileDescriptor

var file_flix_transfer_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x6c, 0x69, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x6b, 0x67, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x50, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_flix_transfer_proto_goTypes = []interface{}{
	(*emptypb.Empty)(nil), // 0: google.protobuf.Empty
}
var file_flix_transfer_proto_depIdxs = []int32{
	0, // 0: flix.transfer_util.pkg.FileTransfer.Transfer:input_type -> google.protobuf.Empty
	0, // 1: flix.transfer_util.pkg.FileTransfer.Transfer:output_type -> google.protobuf.Empty
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_flix_transfer_proto_init() }
func file_flix_transfer_proto_init() {
	if File_flix_transfer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flix_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flix_transfer_proto_goTypes,
		DependencyIndexes: file_flix_transfer_proto_depIdxs,
	}.Build()
	File_flix_transfer_proto = out.File
	file_flix_transfer_proto_rawDesc = nil
	file_flix_transfer_proto_goTypes = nil
	file_flix_transfer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileTransferClient is the client API for FileTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileTransferClient interface {
	Transfer(ctx context.Context, opts ...grpc.CallOption) (FileTransfer_TransferClient, error)
}

type fileTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferClient(cc grpc.ClientConnInterface) FileTransferClient {
	return &fileTransferClient{cc}
}

func (c *fileTransferClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (FileTransfer_TransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileTransfer_serviceDesc.Streams[0], "/flix.transfer_util.pkg.FileTransfer/Transfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferTransferClient{stream}
	return x, nil
}

type FileTransfer_TransferClient interface {
	Send(*emptypb.Empty) error
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type fileTransferTransferClient struct {
	grpc.ClientStream
}

func (x *fileTransferTransferClient) Send(m *emptypb.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransferTransferClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransferServer is the server API for FileTransfer service.
type FileTransferServer interface {
	Transfer(FileTransfer_TransferServer) error
}

// UnimplementedFileTransferServer can be embedded to have forward compatible implementations.
type UnimplementedFileTransferServer struct {
}

func (*UnimplementedFileTransferServer) Transfer(FileTransfer_TransferServer) error {
	return status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}

func RegisterFileTransferServer(s *grpc.Server, srv FileTransferServer) {
	s.RegisterService(&_FileTransfer_serviceDesc, srv)
}

func _FileTransfer_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServer).Transfer(&fileTransferTransferServer{stream})
}

type FileTransfer_TransferServer interface {
	Send(*emptypb.Empty) error
	Recv() (*emptypb.Empty, error)
	grpc.ServerStream
}

type fileTransferTransferServer struct {
	grpc.ServerStream
}

func (x *fileTransferTransferServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransferTransferServer) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileTransfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flix.transfer_util.pkg.FileTransfer",
	HandlerType: (*FileTransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _FileTransfer_Transfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "flix_transfer.proto",
}
